{
  "version": 2.0,
  "questions": [
    {
      "question": "What is a format string vulnerability?",
      "answers": {
        "a": "A type of vulnerability where user input is incorrectly formatted for display.",
        "b": "A security flaw where user input is used as a format string in functions like printf, potentially allowing unauthorized access to memory.",
        "c": "A vulnerability that occurs when a program fails to encrypt data properly.",
        "d": "A bug that results in incorrect data being sent over a network."
      },
      "explanations": {
        "a": "This describes a symptom of the issue, not the actual vulnerability.",
        "b": "Correct. Format string vulnerabilities occur when user input is used directly as a format string, potentially exposing memory or allowing for other attacks.",
        "c": "This describes a different type of security issue related to encryption, not format strings.",
        "d": "This describes a network-related issue rather than a format string vulnerability."
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "Which function is commonly associated with format string vulnerabilities?",
      "answers": {
        "a": "scanf",
        "b": "strcpy",
        "c": "printf",
        "d": "fopen"
      },
      "explanations": {
        "a": "While `scanf` can have its own issues, it is not typically associated with format string vulnerabilities in the same way as `printf`.",
        "b": "`strcpy` is used for copying strings and is not related to format string vulnerabilities.",
        "c": "Correct. `printf` is commonly associated with format string vulnerabilities when user input is improperly used as a format string.",
        "d": "`fopen` is related to file operations and does not involve format string issues."
      },
      "correctAnswer": "c",
      "difficulty": "beginner"
    },
    {
      "question": "What can be a consequence of exploiting a format string vulnerability?",
      "answers": {
        "a": "The application might crash or behave unexpectedly.",
        "b": "Sensitive data may be exposed from memory.",
        "c": "Unauthorized code execution may occur.",
        "d": "All of the above"
      },
      "explanations": {
        "a": "While application crashes are possible, there are often more serious consequences.",
        "b": "Correct. Exploiting a format string vulnerability can lead to exposure of sensitive data stored in memory.",
        "c": "Correct. Exploiting such vulnerabilities can also lead to unauthorized code execution.",
        "d": "Correct. All of the listed consequences can result from exploiting a format string vulnerability."
      },
      "correctAnswer": "d",
      "difficulty": "intermediate"
    },
    {
      "question": "Which of the following is an example of unsafe code that could lead to a format string vulnerability?",
      "answers": {
        "a": "printf(user_input);",
        "b": "printf(\"%s\", user_input);",
        "c": "snprintf(buffer, sizeof(buffer), \"%s\", user_input);",
        "d": "puts(user_input);"
      },
      "explanations": {
        "a": "Correct. Directly passing user input as the format string allows an attacker to inject format specifiers.",
        "b": "Using `\"%s\"` ensures user input is treated as a string, preventing format string vulnerabilities.",
        "c": "Using `snprintf` with explicit formatting is safer than directly passing user input.",
        "d": "`puts` does not interpret format specifiers, making it safe from format string vulnerabilities."
      },
      "correctAnswer": "a",
      "difficulty": "beginner"
    },
    {
      "question": "What does the `%x` format specifier do when used in a format string attack?",
      "answers": {
        "a": "Prints an integer in decimal format.",
        "b": "Prints the memory content in hexadecimal format.",
        "c": "Executes shell commands.",
        "d": "Encrypts user input."
      },
      "explanations": {
        "a": "This is incorrect; `%x` prints hexadecimal, not decimal.",
        "b": "Correct. The `%x` specifier can be used in a format string attack to leak memory contents.",
        "c": "Format string vulnerabilities do not directly execute shell commands, but they can be part of a larger exploit chain.",
        "d": "Encryption is unrelated to format string vulnerabilities."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "Which security mechanism can help mitigate format string vulnerabilities?",
      "answers": {
        "a": "Address Space Layout Randomization (ASLR)",
        "b": "Disabling printf in all programs",
        "c": "Using only numeric input in programs",
        "d": "Granting programs root privileges"
      },
      "explanations": {
        "a": "Correct. ASLR makes memory addresses unpredictable, reducing the effectiveness of format string attacks.",
        "b": "Disabling `printf` is not practical; secure coding practices are a better approach.",
        "c": "Restricting input types does not prevent format string vulnerabilities in general.",
        "d": "Running programs with elevated privileges increases security risks instead of mitigating them."
      },
      "correctAnswer": "a",
      "difficulty": "advanced"
    }
  ]
}
