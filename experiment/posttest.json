{
  "version": 2.0,
  "questions": [
    {
      "question": "What did you observe when exploiting a format string vulnerability in the simulation?",
      "answers": {
        "a": "The program displayed the user input correctly without any issues.",
        "b": "The program crashed immediately upon entering the format string attack.",
        "c": "The format string attack allowed access to secret values stored in memory.",
        "d": "The program encrypted the sensitive data automatically."
      },
      "explanations": {
        "a": "This indicates no vulnerability was present or exploited.",
        "b": "While crashing can occur, it is not the primary observation for format string attacks.",
        "c": "Correct. Exploiting the format string vulnerability allowed access to secret values or sensitive data in memory.",
        "d": "Encryption is not a result of format string vulnerabilities; rather, they expose data."
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    },
    {
      "question": "Which coding practice can help prevent format string vulnerabilities?",
      "answers": {
        "a": "Directly using user input as a format string in printf functions.",
        "b": "Validating and sanitizing user input before using it in format strings.",
        "c": "Avoiding the use of format strings altogether.",
        "d": "Using encryption on all user inputs."
      },
      "explanations": {
        "a": "Directly using user input without validation is what causes the vulnerability.",
        "b": "Correct. Proper validation and sanitization of user input prevent format string vulnerabilities.",
        "c": "While avoiding format strings can help, it is not always practical or necessary; proper validation is preferred.",
        "d": "Encryption is not directly related to preventing format string vulnerabilities."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the primary risk associated with a format string vulnerability if exploited by an attacker?",
      "answers": {
        "a": "Loss of network connectivity",
        "b": "Exposure of sensitive data or potential unauthorized code execution",
        "c": "Data loss due to file corruption",
        "d": "Increased application performance"
      },
      "explanations": {
        "a": "Format string vulnerabilities do not typically affect network connectivity.",
        "b": "Correct. The primary risk is exposure of sensitive data or unauthorized code execution.",
        "c": "While format string vulnerabilities can cause various issues, data loss due to file corruption is not a typical risk.",
        "d": "Format string vulnerabilities do not improve application performance; they pose security risks."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "How does an attacker typically exploit a format string vulnerability?",
      "answers": {
        "a": "By injecting special format specifiers into user input to access memory locations.",
        "b": "By using brute force to guess memory addresses.",
        "c": "By encrypting the vulnerable code to make it unreadable.",
        "d": "By executing denial-of-service attacks on the system."
      },
      "explanations": {
        "a": "Correct. Attackers use format specifiers like %x, %s, or %n to read or write memory.",
        "b": "Brute force attacks are unrelated to format string vulnerabilities.",
        "c": "Encryption does not exploit vulnerabilities; it is used for securing data.",
        "d": "While format string vulnerabilities can cause crashes, they are not a typical method for executing DoS attacks."
      },
      "correctAnswer": "a",
      "difficulty": "intermediate"
    },
    {
      "question": "Which of the following is an example of a format string attack?",
      "answers": {
        "a": "printf(user_input);",
        "b": "printf(\"%s\", user_input);",
        "c": "encrypt(user_input);",
        "d": "hash(user_input);"
      },
      "explanations": {
        "a": "Correct. Using user input directly in printf without specifying a format string can lead to an attack.",
        "b": "This is the correct way to handle user input to avoid format string vulnerabilities.",
        "c": "Encryption is unrelated to format string vulnerabilities.",
        "d": "Hashing does not introduce format string vulnerabilities."
      },
      "correctAnswer": "a",
      "difficulty": "intermediate"
    },
    {
      "question": "Which of the following is NOT a consequence of a format string vulnerability?",
      "answers": {
        "a": "Leakage of sensitive memory data",
        "b": "Execution of arbitrary code",
        "c": "Increase in system security",
        "d": "Program crashes"
      },
      "explanations": {
        "a": "Format string vulnerabilities can expose sensitive memory content.",
        "b": "Correct. Attackers can execute arbitrary code by exploiting format string vulnerabilities.",
        "c": "Incorrect. Format string vulnerabilities reduce security, not improve it.",
        "d": "Crashes are a possible outcome of exploiting a format string vulnerability."
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    }
  ]
}
